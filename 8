#include <iostream>
#include <cmath>

// Calculates (base^exponent) % modulus efficiently
int modPow(int base, int exponent, int modulus) {
    if (modulus == 1)
        return 0;

    int result = 1;
    base = base % modulus;

    while (exponent > 0) {
        if (exponent % 2 == 1)
            result = (result * base) % modulus;

        exponent = exponent >> 1;
        base = (base * base) % modulus;
    }

    return result;
}

// Generates the shared secret key using the Diffie-Hellman algorithm
int generateSharedKey(int base, int prime, int privateKey) {
    return modPow(base, privateKey, prime);
}

int main() {
    int base, prime; // Publicly shared values
    int alicePrivateKey, bobPrivateKey; // Private keys for Alice and Bob

    std::cout << "Enter the base value: ";
    std::cin >> base;

    std::cout << "Enter the prime value: ";
    std::cin >> prime;

    std::cout << "Enter Alice's private key: ";
    std::cin >> alicePrivateKey;

    std::cout << "Enter Bob's private key: ";
    std::cin >> bobPrivateKey;

    // Alice generates her public key
    int alicePublicKey = generateSharedKey(base, prime, alicePrivateKey);

    // Bob generates his public key
    int bobPublicKey = generateSharedKey(base, prime, bobPrivateKey);

    // Alice and Bob exchange public keys

    // Alice computes the shared secret key
    int aliceSharedKey = generateSharedKey(bobPublicKey, prime, alicePrivateKey);

    // Bob computes the shared secret key
    int bobSharedKey = generateSharedKey(alicePublicKey, prime, bobPrivateKey);

    std::cout << "Alice's shared key: " << aliceSharedKey << std::endl;
    std::cout << "Bob's shared key: " << bobSharedKey << std::endl;

    return 0;
}
